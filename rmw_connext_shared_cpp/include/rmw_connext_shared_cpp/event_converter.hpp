
#ifndef RMW__EVENT_CONVERTER_H_
#define RMW__EVENT_CONVERTER_H_

#include "rmw/types.h"
#include "ndds/ndds_cpp.h"
#include <unordered_map>

inline DDS_StatusMask get_mask_from_rmw(const rmw_event_type_t &event_t) {
 	std::unordered_map<rmw_event_type_t, DDS_StatusMask> mask_map{
 		{RMW_EVENT_SAMPLE_REJECTED, DDS_SAMPLE_REJECTED_STATUS},
 		{RMW_EVENT_LIVELINESS_CHANGED, DDS_LIVELINESS_CHANGED_STATUS},
 		{RMW_EVENT_REQUESTED_DEADLINE_MISSED, DDS_REQUESTED_DEADLINE_MISSED_STATUS},
 		{RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS, DDS_REQUESTED_INCOMPATIBLE_QOS_STATUS},
 		{RMW_EVENT_DATA_AVAILABLE, DDS_DATA_AVAILABLE_STATUS},
 		{RMW_EVENT_SAMPLE_LOST, DDS_SAMPLE_LOST_STATUS},
 		{RMW_EVENT_SUBSCRIPTION_MATCHED, DDS_SUBSCRIPTION_MATCHED_STATUS},
 		{RMW_EVENT_LIVELINESS_LOST, DDS_LIVELINESS_LOST_STATUS},
 		{RMW_EVENT_OFFERED_DEADLINE_MISSED, DDS_OFFERED_DEADLINE_MISSED_STATUS},
 		{RMW_EVENT_OFFERED_INCOMPATIBLE_QOS, DDS_OFFERED_INCOMPATIBLE_QOS_STATUS},
 		{RMW_EVENT_PUBLICATION_MATCHED, DDS_PUBLICATION_MATCHED_STATUS}
 	};
	return mask_map[event_t];
}

#endif  // RMW__EVENT_CONVERTER_H_
